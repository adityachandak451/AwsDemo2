AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Glue job that converts CSV files to Parquet.

Parameters:
  InboundBucket:
    Type: String
    Default: "my-data-bucket-learning"

  OutboundBucket:
    Type: String
    Default: "my-data-bucket-learning"

  ScriptBucket:
    Type: String
    Default: "src-code-bucket-learning"

  ScriptKey:
    Type: String
    Default: "SecondPOC/glue-job-scripts/s3_to_parquet_job.py"

Resources:
  GlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GlueJobExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GlueS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${InboundBucket}/*"
                  - !Sub "arn:aws:s3:::${OutboundBucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  GlueJob:
    Type: AWS::Glue::Job
    Properties:
      Name: S3ToParquetGlueJob
      Role: !GetAtt GlueJobRole.Arn
      Command:
        Name: pythonshell
        PythonVersion: "3"
        ScriptLocation: !Sub "s3://${ScriptBucket}/${ScriptKey}"
      DefaultArguments:
        "--inbound_path": !Sub "s3://${InboundBucket}/inbound/"
        "--outbound_path": !Sub "s3://${OutboundBucket}/outbound/"
      MaxCapacity: 0.0625
      Timeout: 2880
      MaxRetries: 1

  GlueJobTriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: S3ToParquetLambda
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt GlueJobRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          glue = boto3.client('glue')

          def lambda_handler(event, context):
              for record in event['Records']:
                  bucket_name = record['s3']['bucket']['name']
                  object_key = record['s3']['object']['key']
                  if 's3_to_parquet_job.py' in object_key:
                      response = glue.update_job(
                          JobName='S3ToParquetGlueJob',
                          JobUpdate={'Command': {'ScriptLocation': f"s3://{bucket_name}/{object_key}"}}
                      )
                      print("Glue Job Updated:", response)

              return {'statusCode': 200, 'body': json.dumps('Glue Job Updated')}

  S3EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GlueJobTriggerLambda
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${InboundBucket}"

Outputs:
  GlueJobName:
    Value: !Ref GlueJob
  LambdaFunctionName:
    Value: !Ref GlueJobTriggerLambda
